/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/67cf3d4d778519353ec550b8.glb 
*/

import React, { useEffect, useRef } from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

export function Avatar(props) {

  const group = useRef();
  const { scene } = useGLTF('models/newModel.glb');


  

  const {animations: typingAnimation} = useFBX('animations/Typing.fbx');


  typingAnimation.forEach((clip) => {
    clip.tracks.forEach((track) => {
        track.name = track.name
            .replace('mixamorigSpine1', 'Spine1')
            .replace('mixamorigNeck', 'Neck')
            .replace('mixamorigHips', 'Hips');
    });
});

  typingAnimation[0].name = "Typing";


  console.log(typingAnimation);
  console.log(scene);

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
    const { nodes, materials } = useGraph(clone)

  const {actions} = useAnimations(typingAnimation, clone);

  useEffect(() => {
      actions["Typing"].reset().play();
  }, [])
  useEffect(() => {
    console.log("Available Nodes in Scene:", Object.keys(nodes));
    console.log("Available Animations:", typingAnimation.map(a => a.name));
}, [nodes, typingAnimation]);

return (
  <group {...props} dispose={null}>
    <mesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} />
    <mesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} />
    <mesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} />
    <mesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials['Wolf3D_Outfit_Bottom.002']} />
    <mesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} />
    <mesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} />
    <mesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
    <mesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
    <mesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
    <mesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
  </group>
)
}

useGLTF.preload('models/newModel.glb')
